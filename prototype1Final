import spacy
import re

# Load the English language model
nlp = spacy.load("en_core_web_sm")


def extract_numbers(text):
    return [float(num) for num in re.findall(r'\d+(?:\.\d+)?', text)]


def analyze_problem(problem):
    doc = nlp(problem)
    numbers = extract_numbers(problem)
    entities = [ent.text for ent in doc.ents]
    keywords = [token.text for token in doc if token.pos_ in ["NOUN", "VERB", "NUM"]]

    return {
        "numbers": numbers,
        "entities": entities,
        "keywords": keywords
    }


def calculate_proximity(correct, student):
    if correct == 0:  # Avoid division by zero
        return 100 if student == 0 else 0

    percentage_diff = abs(student - correct) / correct * 100
    return max(0, 100 - percentage_diff)  # Cap at 0% minimum


def evaluate_answer(problem, correct_answer, student_answer):
    problem_info = analyze_problem(problem)
    correct_numbers = extract_numbers(correct_answer)
    student_numbers = extract_numbers(student_answer)

    if not correct_numbers or not student_numbers:
        return False, "Unable to compare answers. Please provide numerical answers.", 0

    correct_value = correct_numbers[0]
    student_value = student_numbers[0]

    proximity = calculate_proximity(correct_value, student_value)

    if proximity == 100:
        return True, "Correct! Great job!", proximity
    elif proximity > 90:
        return False, f"Very close! You're {proximity:.2f}% accurate.", proximity
    elif proximity > 70:
        return False, f"Getting there! You're {proximity:.2f}% accurate.", proximity
    else:
        return False, f"Not quite. You're {proximity:.2f}% accurate. Let's review the problem.", proximity


def main():
    problems = [
        "Max has 5 apples. He gives 2 apples to his friend. How many apples does Max have now?",
        "A rectangle has a length of 10 cm and a width of 5 cm. What is its area?",
        "Sarah saves $20 each week. How much money will she have saved after 8 weeks?"
    ]

    answers = ["3", "50", "160"]

    for i, problem in enumerate(problems):
        print(f"\nProblem {i + 1}:")
        print(problem)

        student_answer = input("Your answer: ")

        is_correct, feedback, proximity = evaluate_answer(problem, answers[i], student_answer)
        print(feedback)

        if not is_correct:
            print(f"Your answer was {proximity:.2f}% close to the correct answer.")
            print("Problem analysis:")
            analysis = analyze_problem(problem)
            print(f"Numbers in the problem: {analysis['numbers']}")
            print(f"Key entities: {analysis['entities']}")
            print(f"Important keywords: {analysis['keywords']}")
            print(f"The correct answer is: {answers[i]}")


if __name__ == "__main__":
    main()
